name: Submodule Sync by Tag

on:
  schedule:
    - cron: '0 19 * * *'
  workflow_dispatch:
    inputs:
      targetTag:
        type: string
        required: false
        description: 'Input tag here'
        default: ''
  pull_request:
    types:
      - closed

env:
  TAG_VALIDATION: '^v\(\.[0-9]\+\)\+$'
  TARGET_BRANCH: develop
  SUBMODULE_DIR: themes/techblog
  NEW_BRANCH_BASE: design
  COMMIT_MESSAGE: 'Update submodule by '
  PR_TITLE: 'New Submodule Version is Released'
  PR_BODY: ''

jobs:
  Prepare:
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' }}
    outputs:
      processingTag: ${{ steps.stepProcessingTag.outputs.processingTag }}
    steps:
      - name: Echo Environments
        run: |
          echo '::group::Software version'
          echo 'bash version'
          bash --version
          echo 'grep version'
          grep --version
          echo 'jq version'
          jq --version
          echo 'git version'
          git --version
          echo 'gh version'
          gh version
          echo '::endgroup::'
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0
          submodules: recursive
      - name: Check Target Tag Validation
        if: ${{ github.event.inputs.targetTag }}
        working-directory: ${{ env.SUBMODULE_DIR }}
        run: |
          if ! (echo "${{ github.event.inputs.targetTag }}" | grep -q "${TAG_VALIDATION}"); then
            echo "::error::The target tag ${{ github.event.inputs.targetTag }} is invalid format."
            echo "::error::The tag should match a pattern like this: ${TAG_VALIDATION}"
            exit 1
          fi
          if git tag -l --sort -authordate | grep -x "${{ github.event.inputs.targetTag }}"; then
            exit 0
          else
            echo "::error::The target tag ${{ github.event.inputs.targetTag }} is not tagged in submodule."
            exit 1
          fi
      - id: stepLatestTag
        if: ${{ ! github.event.inputs.targetTag }}
        name: Set the Latest Submodule Tag to Environment
        working-directory: ${{ env.SUBMODULE_DIR }}
        run: |
          LATEST_TAG="$(git tag -l --sort -authordate | head -n 1)"
          if ! (echo "${LATEST_TAG}" | grep -q "${TAG_VALIDATION}"); then
            echo "::error::The latest tag ${LATEST_TAG} is invalid format."
            echo "::error::The tag should match a pattern like this: ${TAG_VALIDATION}"
            exit 1
          fi
          echo "::set-output name=latestTag::${LATEST_TAG}"
      - name: Download the Current Tag Artifact
        if: ${{ ! github.event.inputs.targetTag }}
        uses: dawidd6/action-download-artifact@v2
        with:
            github_token: ${{ secrets.GITHUB_TOKEN }}
            workflow: submodule-sync-by-tag.yml
            workflow_conclusion: success
            name: currentTag
            path: .artifact
            check_artifacts:  true
            search_artifacts: true
      - id: stepCurrentTag
        name: Set the Current Tag to Environment
        if: ${{ ! github.event.inputs.targetTag }}
        run: |
          CURRENT_TAG="$(jq -r '.tag' < .artifact/currentTag.json)"
          echo "::set-output name=currentTag::${CURRENT_TAG}"
      - name: Detect Submodule Updates
        if: ${{ ! github.event.inputs.targetTag }}
        run: |
          if [ ${{ steps.stepLatestTag.outputs.latestTag }} \> ${{ steps.stepCurrentTag.outputs.currentTag }} ]; then
            exit 0
          else
            echo "::error::The current tag ${{ steps.stepCurrentTag.outputs.currentTag }} is newer than the latest tag ${{ steps.stepLatestTag.outputs.latestTag }}."
            exit 1
          fi
      - id: stepProcessingTag
        name: Determine Processing Tag
        env:
          TARGET: ${{ github.event.inputs.targetTag }}
          LATEST: ${{ steps.stepLatestTag.outputs.latestTag }}
        run: |
          if [ -n "${TARGET}" ]; then
            echo "::set-output name=processingTag::${TARGET}"
            exit 0
          fi
          if [ -n "${LATEST}" ]; then
            echo "::set-output name=processingTag::${LATEST}"
            exit 0
          fi
          echo '::error::The processing tag cannot be defined.'
          exit 1
      - name: Check a New Branch Name is Usable
        run: |
          if ! git branch -a --format="%(refname:short)" | grep -x "origin/${NEW_BRANCH_BASE}/${{ steps.stepProcessingTag.outputs.processingTag }}"; then
            exit 0
          else
            echo "::error::The branch name ${NEW_BRANCH_BASE}/${{ steps.stepProcessingTag.outputs.processingTag }} is already in use."
            exit 1
          fi

  Update:
    needs: Prepare
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ env.TARGET_BRANCH }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          fetch-depth: 0
          submodules: recursive
      - name: Create a New Branch
        run: |
          echo "Current branch is $(git symbolic-ref --short HEAD)"
          git switch -c "${NEW_BRANCH_BASE}/${{ needs.Prepare.outputs.processingTag }}"
          echo "Current branch is $(git symbolic-ref --short HEAD)"
          git push -u origin "${NEW_BRANCH_BASE}/${{ needs.Prepare.outputs.processingTag }}"
      - name: Checkout Submodule by Tag
        run: |
          cd "${SUBMODULE_DIR}"
          git checkout refs/tags/${{ needs.Prepare.outputs.processingTag }}
      - name: Add, Commit and Push Submodule Update
        run: |
          if ! git diff --exit-code; then
            git config user.name "${GITHUB_ACTOR}"
            git config user.email "${GITHUB_ACTOR}@github.com"
            git add "${SUBMODULE_DIR}"
            git commit -m "${COMMIT_MESSAGE}${GITHUB_ACTOR}"
            git push
            exit 0
          else
            echo "::error::There is no change in the referenced submodule of the branch ${{ env.TARGET_BRANCH }}"
            exit 1
          fi
      - name: Create a New Pull Request
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          gh pr create -B "${TARGET_BRANCH}" -t "${PR_TITLE}" -b "${PR_BODY}"
      - name: Remove the New Branch to Rollback
        if: ${{ failure() }}
        run: |
          if git branch -a --format="%(refname:short)" | grep -x "${NEW_BRANCH_BASE}/${{ needs.Prepare.outputs.processingTag }}"; then
            git push --delete origin "${NEW_BRANCH_BASE}/${{ needs.Prepare.outputs.processingTag }}"
          fi
      - name: Create an Artifact JSON File
        run: |
          mkdir -p .artifact
          jq -n --arg tag ${{ needs.Prepare.outputs.processingTag }} '{"tag": $tag}' > .artifact/currentTag.json
      - name: Upload the Current Tag Artifact
        uses: actions/upload-artifact@v3
        with:
          name: currentTag
          path: .artifact/currentTag.json

  CleanUp:
    runs-on: ubuntu-latest
    if: >-
      ${{
        github.event_name == 'pull_request'
      }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      - name: Remove the Temporary Branch
        env:
          HEAD_REF: ${{ github.head_ref }}
        run: |
          if git branch -a --format="%(refname:short)" | grep -x "$HEAD_REF"; then
            git push --delete origin "$HEAD_REF"
          fi
